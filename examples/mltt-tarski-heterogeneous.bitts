(* MLTT with a cumulative hierarchy of Tarski-style universes and universe polymorphism *)

(* variant in which π is heterogeneous, in the sense that it is allowed to take two codes
   a and b in different universes. this unfortunately leads to more annotations in the syntax. *)

(* Judgment forms *)
sort Ty ()
sort Tm (A : Ty)

sort Lvl ()
constructor 0ₗ () () : Lvl
constructor Sₗ () (_ : Lvl) : Lvl
destructor maxₗ () [i : Lvl] (j : Lvl) : Lvl

equation maxₗ(0ₗ, j) --> j
equation maxₗ(Sₗ(i), 0ₗ) --> Sₗ(i)
equation maxₗ(Sₗ(i), Sₗ(j)) --> Sₗ(maxₗ(i, j))


(* Taski-style universe *)
constructor U () (l : Lvl) : Ty
destructor El (l : Lvl) [A : Tm(U(l))] () : Ty


(* we must declare the level l as an index, otherwise l is omitted from the
   syntax and we cannot write the rule  El(𝑢) --> U(?) because we don't know
   what to put in the place of ? *)
constructor 𝑢 () (l : Lvl) (Sₗ(l) / l : Lvl) : Tm(U(l))
equation El(𝑢(l)) --> U(l)


(* we can also declare ↑ as a destructor if we want *)
constructor ↑ (i : Lvl) (a : Tm(U(i))) : Tm(U(Sₗ(i)))
equation El(↑(A)) --> El(A)


(* Dependent products *)
constructor Π   ()
                (A : Ty, B{x : Tm(A)} : Ty)
                : Ty

constructor λ   (A : Ty, B{x : Tm(A)} : Ty)
                (t{x : Tm(A)} : Tm(B{x}))
                : Tm(Π(A, x. B{x}))

destructor ﹫   (A : Ty, B{x : Tm(A)} : Ty)
                [t : Tm(Π(A, x. B{x}))]
                (u : Tm(A))
                : Tm(B{u})

equation ﹫(λ(x. t{x}), u) --> t{u}

(* in order to allow a and b to live in two different universes, we have to add
   the level annotations to the syntax unfortunately *)
constructor π () (i1 : Lvl, i2 : Lvl, a : Tm(U(i1)), b{_ : Tm(El(a))} : Tm(U(i2)))
              (maxₗ(i1, i2) / i : Lvl) : Tm(U(i))
equation El(π(i1, i2, a, x.b{x})) --> Π(El(a), x. El(b{x}))


(* Natural numbers *)
constructor ℕ () () : Ty
constructor 0 () () : Tm(ℕ)
constructor S () (_ : Tm(ℕ)) : Tm(ℕ)

destructor ind_ℕ    ()
                    [n : Tm(ℕ)]
                    (P {x : Tm(ℕ)} : Ty,
                     p0 : Tm(P{0}),
                     ps {n : Tm(ℕ), pn : Tm(P{n})} : Tm(P{S(n)}))
                (* ------------ *)
                    : Tm(P{n})

equation ind_ℕ(0, x. P{x}, p0, n pn. ps{n, pn}) --> p0
equation ind_ℕ(S(n), x. P{x}, p0, n pn. ps{n, pn}) -->
    ps{n, ind_ℕ(n, x. P{x}, p0, n pn. ps{n, pn})}

(* code in U for ℕ *)
constructor nat (i : Lvl) () : Tm(U(i))
equation El(nat) --> ℕ



(* universe polymorphism (quantification over levels) *)
constructor ∀ () (A {i : Lvl} : Ty) : Ty
constructor Λ (A {i : Lvl} : Ty) (t{i : Lvl} : Tm(A{i}))
        : Tm(∀(i. A{i}))
destructor inst (A {i : Lvl} : Ty) [t : Tm(∀(i. A{i}))] (l : Lvl)
        : Tm(A{l})
equation inst(Λ(i. t{i}), l) --> t{l}


(* universe polymorphic id function *)
(* note that the sort cannot be simplified, because
   maxₗ(Sₗ(i), maxₗ(i,i)) = Sₗ(i) does not hold on open terms *)
let id_poly : Tm(∀(i. El(π(Sₗ(i), maxₗ(i,i), 𝑢(i), a. π(i, i, a, _. a))
                          :: Tm(U(maxₗ(Sₗ(i) :: Lvl, maxₗ(i,i)))))))
  :=  Λ(i. λ(a. λ(x. x)))

(* the above sort is convertible to Tm(∀(i. Π(U(i), a. Π(El(a), _. El(a))))) *)
evaluate Tm(∀(i. El(π(Sₗ(i), maxₗ(i,i), 𝑢(i), a. π(i, i, a, _. a))
                          :: Tm(U(maxₗ(Sₗ(i) :: Lvl, maxₗ(i,i)))))))

(* applying it to 0 *)
let 0' : Tm(ℕ) := ﹫(﹫(inst(id_poly, 0ₗ), nat), 0)
assert 0' = 0
