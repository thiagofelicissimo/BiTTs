
(* HIGHER-ORDER LOGIC (AKA SIMPLE TYPE THEORY) *)

sort Ty ()
sort Tm (A : Ty)

constructor prop () () : Ty
sort Prf (t : Tm(prop))

(* simple function type *)
constructor → () (A : Ty, B : Ty) : Ty
constructor λ (A : Ty, B : Ty) (t{x : Tm(A)} : Tm(B)) : Tm(→(A, B))
destructor ﹫ (A : Ty, B : Ty) [t : Tm(→(A, B))] (u : Tm(A)) : Tm(B)
rewrite ﹫(λ(x. t{x}), u) --> t{u}

constructor  ∀ () (A : Ty, P{x : Tm(A)} : Tm(prop)) : Tm(prop)
constructor in∀ (A : Ty, P{x : Tm(A)} : Tm(prop)) (t{x : Tm(A)} : Prf(P{x})) : Prf(∀(A, x. P{x}))
destructor  el∀ (A : Ty, P{x : Tm(A)} : Tm(prop)) [t : Prf(∀(A, x. P{x}))] (u : Tm(A)) : Prf(P{u})
rewrite el∀(in∀(x. p{x}), t) --> p{t}

constructor ⇒ () (P : Tm(prop), Q : Tm(prop)) : Tm(prop)
constructor in⇒ (P : Tm(prop), Q : Tm(prop)) (q{p : Prf(P)} : Prf(Q)) : Prf(⇒(P, Q))
destructor  el⇒ (P : Tm(prop), Q : Tm(prop)) [pq : Prf(⇒(P, Q))] (p : Prf(P)) : Prf(Q)
rewrite el⇒(in⇒(x. q{x}), p) --> q{p}

let P⇒P : Prf(∀(prop, P. ⇒(P, P)))
    := in∀(P. in⇒(p. p))

let K : Prf(∀(prop, P. ∀(prop, Q. ⇒(P, ⇒(Q, P)))))
    := in∀(P. in∀(Q. in⇒(p. in⇒(q. p))))

(* we can define conjunction using the impredicative encoding *)

let ∧ (P : Tm(prop), Q : Tm(prop)) : Tm(prop)
    := ∀(prop, R. ⇒(⇒(P, ⇒(Q, R)), R))

let in∧ (P : Tm(prop), Q : Tm(prop), p : Prf(P), q : Prf(Q)) : Prf(∧(P, Q))
    := in∀(R. in⇒(ϕ. el⇒(el⇒(ϕ, p), q)))

let el1∧ (P : Tm(prop), Q : Tm(prop), pq : Prf(∧(P, Q))) : Prf(P)
    := el⇒(el∀(pq, P), in⇒(x. in⇒(y. x)))

let el2∧ (P : Tm(prop), Q : Tm(prop), pq : Prf(∧(P, Q))) : Prf(Q)
    := el⇒(el∀(pq, Q), in⇒(x. in⇒(y. y)))

(* note that because the above are top-level definitions and not symbol
   declarations, there is no support for omitting some of its arguments.
   nevertheless, once we now that they are justified by the theory, nothing
   stops us from conservatively extending our theory with constructors and
   destructors which are just copies of the above *)

constructor ∧' () (P : Tm(prop), Q : Tm(prop)) : Tm(prop)
constructor in∧' (P : Tm(prop), Q : Tm(prop)) (p : Prf(P), q : Prf(Q)) : Prf(∧'(P, Q))
destructor el1∧' (P : Tm(prop), Q : Tm(prop)) [pq : Prf(∧'(P, Q))] () : Prf(P)
destructor el2∧' (P : Tm(prop), Q : Tm(prop)) [pq : Prf(∧'(P, Q))] () : Prf(Q)

