
(* MLTT with a Taski-style universe *)

(* Judgment forms *)
sort Ty ()
sort Tm (A : Ty)


(* Taski-style universe *)
constructor U () () : Ty
destructor El () [A : Tm(U)] () : Ty


(* Dependent products *)
constructor Π   ()
                (A : Ty, B{x : Tm(A)} : Ty)
                : Ty

constructor λ   (A : Ty, B{x : Tm(A)} : Ty)
                (t{x : Tm(A)} : Tm(B{x}))
                : Tm(Π(A, x. B{x}))

destructor ﹫   (A : Ty, B{x : Tm(A)} : Ty)
                [t : Tm(Π(A, x. B{x}))]
                (u : Tm(A))
                : Tm(B{u})

equation ﹫(λ(x. t{x}), u) --> t{u}


constructor π () (a : Tm(U), b{_ : Tm(El(a))} : Tm(U)) : Tm(U)
equation El(π(a, x.b{x})) --> Π(El(a), x. El(b{x}))

(* polymorphic identity at U *)
let idU : Tm(Π(U, a. Π(El(a), _. El(a)))) := λ(a. λ(x. x))

(* Dependent sums *)
constructor Σ () (A : Ty, B{x : Tm(A)} : Ty) : Ty

constructor mkΣ     (A : Ty, B{x : Tm(A)} : Ty)
                    (t : Tm(A), u : Tm(B{t}))
                    : Tm(Σ(A, x. B{x}))

destructor π₁       (A : Ty, B{x : Tm(A)} : Ty)
                    [t : Tm(Σ(A, x. B{x}))]
                    () : Tm(A)

destructor π₂       (A : Ty, B{x : Tm(A)} : Ty)
                    [t : Tm(Σ(A, x. B{x}))]
                    () : Tm(B{π₁(t)})

equation π₁(mkΣ(t, u)) --> t
equation π₂(mkΣ(t, u)) --> u


constructor σ () (a : Tm(U), b{x : Tm(El(a))} : Tm(U)) : Tm(U)
equation El(σ(a, x.b{x})) --> Σ(El(a), x. El(b{x}))


(* axiom of choice *)
let ac : Tm(Π(U, a. Π(U, b. Π(Π(El(b), _. U), c.
            Π(Π(El(a), _. Σ(El(b), x. El(﹫(c, x)))), _.
            Σ(Π(El(a), _. El(b)), f. Π(El(a), x. El(﹫(c, ﹫(f, x))))))))))
    := λ(a. λ(b. λ(c. λ(ϕ. mkΣ(λ(x. π₁(﹫(ϕ, x))), λ(x. π₂(﹫(ϕ, x))))))))


(* Natural numbers *)
constructor ℕ () () : Ty
constructor 0 () () : Tm(ℕ)
constructor S () (n : Tm(ℕ)) : Tm(ℕ)

destructor ind_ℕ    ()
                    [n : Tm(ℕ)]
                    (P {x : Tm(ℕ)} : Ty,
                     p0 : Tm(P{0}),
                     ps {n : Tm(ℕ), pn : Tm(P{n})} : Tm(P{S(n)}))
                (* ------------ *)
                    : Tm(P{n})

equation ind_ℕ(0, x. P{x}, p0, n pn. ps{n, pn}) --> p0
equation ind_ℕ(S(n), x. P{x}, p0, n pn. ps{n, pn}) -->
    ps{n, ind_ℕ(n, x. P{x}, p0, n pn. ps{n, pn})}

(* code in U for ℕ *)
constructor nat () () : Tm(U)
equation El(nat) --> ℕ


(* Some functions written using ind_ℕ *)
let ＋ : Tm(Π(ℕ, _. Π(ℕ, _. ℕ))) := λ(x. λ(y. ind_ℕ(y, _. ℕ, x, _ n. S(n))))

let × : Tm(Π(ℕ, _. Π(ℕ, _. ℕ))) :=
    λ(x. λ(y. ind_ℕ(y, _. ℕ, 0, _ n. ﹫(﹫(＋, n), x))))

let fact : Tm(Π(ℕ, _. ℕ)) := λ(x. ind_ℕ(x, _. ℕ, S(0), n m. ﹫(﹫(×, S(n)), m)))

let fact_4 : Tm(ℕ) := ﹫(fact, S(S(S(S(0)))))
evaluate fact_4


(* a checkable term t becomes inferable if annotated
   with a checkable sort T, as in t :: T.
   redexes can be written this way *)
let redex : Tm(ℕ) := ﹫(λ(x. x) :: Tm(Π(ℕ, _. ℕ)), 0)
evaluate redex

(* we can also use let expressions. note that in this case,
   the ascription is associated with the innermost term,
   otherwise this example would be ill-scoped *)
let redex' : Tm(ℕ) :=
    ﹫(let ty : Ty := Π(ℕ, _. ℕ) in λ(x. x) :: Tm(ty), 0)


(* Lists *)
constructor List () (A : Ty) : Ty
constructor nil (A : Ty) () : Tm(List(A))
constructor cons (A : Ty) (a : Tm(A), l : Tm(List(A))) : Tm(List(A))

destructor ind_List     (A : Ty)
                        [l : Tm(List(A))]
                        (P {x : Tm(List(A))} : Ty,
                         l_nil : Tm(P{nil}),
                         l_cons {a : Tm(A), l : Tm(List(A)), pl : Tm(P{l})} : Tm(P{cons(a, l)}))
                        (* -------------- *)
                        : Tm(P{l})

equation ind_List(nil, l. P{l}, l_nil, a l pl. l_cons{a, l, pl}) --> l_nil
equation ind_List(cons(a, l), l. P{l}, l_nil, a l pl. l_cons{a, l, pl}) -->
    l_cons{a, l, ind_List(l, l. P{l}, l_nil, a l pl. l_cons{a, l, pl})}


(* code in U for List *)
constructor list () (a : Tm(U)) : Tm(U)
equation El(list(a)) --> List(El(a))


let 0∷1∷2∷3∷nil : Tm(List(ℕ)) := cons(0, cons(S(0), cons(S(S(0)), cons(S(S(S(0))), nil))))

let sum_of_list : Tm(Π(List(ℕ), _. ℕ)) :=
    λ(l. ind_List(l, _. ℕ, 0, x _ acc. ﹫(﹫(＋, x), acc)))
evaluate ﹫(sum_of_list, 0∷1∷2∷3∷nil)

(* Equality *)
constructor Eq () (A : Ty, x : Tm(A), y : Tm(A)) : Ty

constructor refl (A : Ty, x : Tm(A)) () (x / y : Tm(A)) : Tm(Eq(A, x, y))

destructor J (A : Ty, x : Tm(A), y : Tm(A))
             [t : Tm(Eq(A, x, y))]
             (P{y : Tm(A), e : Tm(Eq(A, x, y))} : Ty, p : Tm(P{x, refl}))
             : Tm(P{y, t})

equation J(refl, y e. P{y, e}, p) --> p

constructor eq () (a : Tm(U), x : Tm(El(a)), y : Tm(El(a))) : Tm(U)
equation El(eq(a, x, y)) --> Eq(El(a), x, y)

let sym : Tm(Π(U, a. Π(El(a), x. Π(El(a), y. Π(Eq(El(a), x, y), _. Eq(El(a), y, x))))))
    :=  λ(a. λ(x. λ(y. λ(p. J(p, z q. Eq(El(a), z, x), refl)))))

let trans : Tm(Π(U, a. Π(El(a), x. Π(El(a), y. Π(El(a), z.
               Π(Eq(El(a), x, y), _. Π(Eq(El(a), y, z), _. Eq(El(a), x, z))))))))
    := λ(a. λ(x. λ(y. λ(z. λ(p. λ(q. J(q, k r. Eq(El(a), x, k), p)))))))

let transp : Tm(Π(U, a. Π(U, b. Π(Eq(U, a, b), _. Π(El(a), _. El(b))))))
    := λ(a. λ(b. λ(p. λ(x. J(p, z q. El(z), x)))))


(* Vectors *)
constructor Vec () (A : Ty, n : Tm(ℕ)) : Ty

constructor nilV (A : Ty) () (0 / n : Tm(ℕ)) : Tm(Vec(A, n))

constructor consV (A : Ty) (m : Tm(ℕ), a : Tm(A), l : Tm(Vec(A, m)))
                           (S(m) / n : Tm(ℕ)) : Tm(Vec(A, n))

destructor ind_Vec  (A : Ty, n : Tm(ℕ))
                    [l : Tm(Vec(A, n))]
                    (P{x : Tm(ℕ), _ : Tm(Vec(A, x))} : Ty,
                     p_nil : Tm(P{0, nilV}),
                     p_cons {n : Tm(ℕ), a : Tm(A), l : Tm(Vec(A, n)), pl : Tm(P{n, l})}
                      : Tm(P{S(n), consV(n, a, l)}))
                     (* -------------- *)
                    : Tm(P{n, l})

equation ind_Vec(nilV, x y. P{x, y}, p_nil, x y z w. p_cons{x, y, z, w}) --> p_nil

equation ind_Vec(consV(m, a, l), x y. P{x, y}, p_nil, x y z w. p_cons{x, y, z, w})
        --> p_cons{m, a, l, ind_Vec(l, x y. P{x, y}, p_nil, x y z w. p_cons{x, y, z, w})}

constructor vec () (a : Tm(U), n : Tm(ℕ)) : Tm(U)
equation El(vec(a, n)) --> Vec(El(a), n)


let 2∷1∷0∷nil : Tm(Vec(ℕ, S(S(S(0))))) := consV(S(S(0)), S(S(0)), consV(S(0), S(0), consV(0, 0, nilV)))

let mk_Vec : Tm(Π(ℕ, n. Vec(ℕ, n)))
    := λ(n. ind_ℕ(n, x. Vec(ℕ, x), nilV, x y. consV(x, x, y)))

assert ﹫(mk_Vec, S(S(S(0)))) = 2∷1∷0∷nil

let append : Tm(Π(U, a.
                Π(ℕ, n1. Π(Vec(El(a), n1), l1.
                Π(ℕ, n2. Π(Vec(El(a), n2), l2. Vec(El(a), ﹫(﹫(＋, n2), n1))))))))
  := λ(a. λ(n1. λ(l1. λ(n2. λ(l2.
    ind_Vec(l1, m _. Vec(El(a), ﹫(﹫(＋, n2), m)), l2, n a l pl. consV(﹫(﹫(＋, n2), n), a, pl)))))))

let 1∷0∷nil : Tm(Vec(ℕ, S(S(0)))) := consV(S(0), S(0), consV(0, 0, nilV))

assert 2∷1∷0∷nil = ﹫(﹫(﹫(﹫(﹫(append, nat), S(0)), consV(0, S(S(0)), nilV)), S(S(0))), 1∷0∷nil)


(* W Types *)
constructor W () (A : Ty, B{x : Tm(A)} : Ty) : Ty
constructor sup (A : Ty, B{x : Tm(A)} : Ty)
                (a : Tm(A), f : Tm(Π(B{a}, _. W(A, x.B{x}))))
                : Tm(W(A, x.B{x}))

destructor ind_W    (A : Ty, B{x : Tm(A)} : Ty)
                    [t : Tm(W(A, x.B{x}))]
                    (P{x : Tm(W(A, x.B{x}))} : Ty,
                     p{x : Tm(A),
                       y : Tm(Π(B{x}, _. W(A, x.B{x}))),
                       z : Tm(Π(B{x}, x'. P{﹫(y, x')}))} : Tm(P{sup(x, y)}) )
                       : Tm(P{t})


equation ind_W(sup(a, f), x. P{x}, x y z. p{x, y, z}) -->
         p{a, f, λ(x. ind_W(﹫(f, x), x. P{x}, x y z. p{x, y, z}))}

constructor w () (a : Tm(U), b{x : Tm(El(a))} : Tm(U)) : Tm(U)
equation El(w(a, x.b{x})) --> W(El(a), x.El(b{x}))

(* auxiliary types to define nat with W *)

constructor ⊥ () () : Ty
destructor ind_⊥ () [x : Tm(⊥)] (P : Ty) : Tm(P)

constructor ⊥c () () : Tm(U)
equation El(⊥c) --> ⊥

constructor ⊤ () () : Ty
constructor I () () : Tm(⊤)

constructor ⊤c () () : Tm(U)
equation El(⊤c) --> ⊤


constructor Bool () () : Ty
constructor tt () () : Tm(Bool)
constructor ff () () : Tm(Bool)

destructor if () [x : Tm(Bool)]
                 (P{x : Tm(Bool)} : Ty,
                  a : Tm(P{tt}),
                  b : Tm(P{ff})) : Tm(P{x})
equation if(tt, x.P{x}, a, b) --> a
equation if(ff, x.P{x}, a, b) --> b

constructor bool () () : Tm(U)
equation El(bool) --> Bool

(* different definition of Nat, using W types *)
let Nat : Ty := W(Bool, x. El(if(x, _. U, ⊤c, ⊥c)))
let zero : Tm(Nat) := sup(ff, λ(x. ind_⊥(x, Nat)))
let succ (x : Tm(Nat)) : Tm(Nat) := sup(tt, λ(_. x))

let plus : Tm(Π(Nat, _. Π(Nat, _. Nat)))
  := λ(x. λ(y.
    ind_W(x, _. Nat, b f h.
     ﹫(if(b,
           x. Π(Π(El(if(x, _. U, ⊤c, ⊥c)), _. Nat), _. Nat),
           λ(h. succ(﹫(h, I))),
           λ(_. y)),
      h))))

let 2_Nat : Tm(Nat) := succ(succ(zero))
let 3_Nat : Tm(Nat) := succ(2_Nat)
let 5_Nat : Tm(Nat) := succ(succ(3_Nat))

assert 5_Nat = ﹫(﹫(plus, 2_Nat), 3_Nat)
