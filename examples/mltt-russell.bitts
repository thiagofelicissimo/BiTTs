
(* MLTT with a hierarchy of cumulative Russell-style universes, and universe polymorphism *)

sort Lvl ()
constructor 0ₗ () () : Lvl
constructor Sₗ () (_ : Lvl) : Lvl

sort Ty (l : Lvl)
sort Tm (l : Lvl, A : Ty(l))

(* Russell-style Universes: Tm(U(l)) = Ty(l) *)
constructor U (l : Lvl) () : Ty(Sₗ(l))
equation Tm(Sₗ(l), U) --> Ty(l)


(* Cumulativity: Tm(Sₗ(l), ↑(A)) = Tm(l, A) *)
constructor ↑ (l : Lvl) (A : Ty(l)) : Ty(Sₗ(l))
equation Tm(Sₗ(l), ↑(A)) --> Tm(l, A)


(* Dependent products *)
constructor Π (l : Lvl) (A : Ty(l), B {x : Tm(l, A)} : Ty(l)) : Ty(l)
constructor λ (l : Lvl,  A : Ty(l), B {x : Tm(l, A)} : Ty(l)) (t{x : Tm(l, A)} : Tm(l, B{x}))
        : Tm(l, Π(A, x. B{x}))
destructor ﹫ (l : Lvl,  A : Ty(l), B {x : Tm(l, A)} : Ty(l)) [t : Tm (l, Π(A, x. B{x}))] (u : Tm(l, A))
        : Tm(l, B{u})

equation ﹫(λ(x. t{x}), u) --> t{u}

(* some authors consider a stronger form of cumulativity in which we have
   ↑(Π(A, x.B{x})) = Π(↑(A),x.↑(B{x})). we unfortunately cannot have it here
   because orienting this equation left-to-right creates an unjoignable
   critical pair with Tm(Sₗ(l), ↑(A)) --> Tm(l, A), breaking confluence and
   invalidating condition (A).(II) of the definition of valid bidirectional
   theories, whereas orienting it right-to-left creates an overlap with the
   sort of λ, invalidating condition (B) of the definition of valid
   bidirectional theories. however, see `mltt-russell-2.bitts`, where
   this can be done. *)

(* Natural numbers *)
constructor ℕ () () : Ty(0ₗ)
constructor 0 () () : Tm(0ₗ, ℕ)
constructor S () (n : Tm(0ₗ, ℕ)) : Tm(0ₗ, ℕ)

destructor ℕ_ind    ()
                    [n : Tm(0ₗ, ℕ)]
                    (i : Lvl,
                     P {x : Tm(0ₗ, ℕ)} : Ty(i),
                     p0 : Tm(i, P{0}),
                     ps {n : Tm(0ₗ, ℕ), pn : Tm(i, P{n})} : Tm(i, P{S(n)}))
                (* ------------ *)
                    : Tm(i, P{n})

equation ℕ_ind(0, i, x. P{x}, p0, n pn. ps{n, pn}) --> p0
equation ℕ_ind(S(n), i, x. P{x}, p0, n pn. ps{n, pn}) -->
    ps{n, ℕ_ind(n, i, x. P{x}, p0, n pn. ps{n, pn})}


(* top universe *)
sort Tyω ()
sort Tmω (A : Tyω)

constructor ↑ω () (l : Lvl, A : Ty(l)) : Tyω
equation Tmω(↑ω(l, A)) --> Tm(l, A)


(* universe polymorphism (quantification over levels) *)
constructor ∀ () (A {i : Lvl} : Tyω) : Tyω
constructor Λ (A {i : Lvl} : Tyω) (t{i : Lvl} : Tmω(A{i}))
        : Tmω(∀(i. A{i}))
destructor inst (A {i : Lvl} : Tyω) [t : Tmω(∀(i. A{i}))] (l : Lvl)
        : Tmω(A{l})
equation inst(Λ(i. t{i}), l) --> t{l}


(* universe polymorphic id function *)
let id_poly : Tmω(∀(i. ↑ω(Sₗ(i), Π(U, A. Π(↑(A), _. ↑(A))))))
    :=  Λ(i. λ(a. λ(x. x)))

(* applying it to 0 *)
let 0' : Tm(0ₗ, ℕ) := ﹫(﹫(inst(id_poly, 0ₗ), ℕ), 0)
assert 0' = 0
