
(* MLTT with a hierarchy of cumulative Coquand-style universes, and universe polymorphism *)

sort Lvl ()
constructor 0ₗ () () : Lvl
constructor Sₗ () (_ : Lvl) : Lvl

sort Ty (l : Lvl)
sort Tm (l : Lvl, A : Ty(l))



(* (Weak) Coquand-style Universes: Ty(l) is a retract of Tm(U(l)) *)
constructor U (l : Lvl) () : Ty(Sₗ(l))
constructor c (l : Lvl) (A : Ty(l)) : Tm(Sₗ(l), U)
destructor El (l : Lvl) [t : Tm(Sₗ(l), U)] () : Ty(l)
equation El(c(A)) --> A

(* (Weak) Cumulativity: Tm(l, A) is a retract of Tm(Sₗ(l), ↑(A)) *)
constructor ↑ (l : Lvl) (A : Ty(l)) : Ty(Sₗ(l))
constructor box (l : Lvl, A : Ty(l)) (t : Tm(l, A)) : Tm(Sₗ(l), ↑(A))
destructor unbox (l : Lvl, A : Ty(l)) [t : Tm(Sₗ(l), ↑(A))] () : Tm(l, A)
equation unbox(box(t)) --> t

(* Dependent products *)
constructor Π (l : Lvl) (A : Ty(l), B {x : Tm(l, A)} : Ty(l)) : Ty(l)
constructor λ (l : Lvl,  A : Ty(l), B {x : Tm(l, A)} : Ty(l)) (t{x : Tm(l, A)} : Tm(l, B{x}))
        : Tm(l, Π(A, x. B{x}))
destructor ﹫ (l : Lvl,  A : Ty(l), B {x : Tm(l, A)} : Ty(l)) [t : Tm (l, Π(A, x. B{x}))] (u : Tm(l, A))
        : Tm(l, B{u})

equation ﹫(λ(x. t{x}), u) --> t{u}

(* some authors consider a stronger form of cumulativity in which we have
   ↑(Π(A, x.B{x})) = Π(↑(A),x.↑(B{x})). we unfortunately cannot have it here
   because ↑ and Π are both constructors, and therefore cannot be the head
   of a rewrite rule *)

(* Natural numbers *)
constructor ℕ () () : Ty(0ₗ)
constructor 0 () () : Tm(0ₗ, ℕ)
constructor S () (n : Tm(0ₗ, ℕ)) : Tm(0ₗ, ℕ)

destructor ℕ_ind    ()
                    [n : Tm(0ₗ, ℕ)]
                    (i : Lvl,
                     P {x : Tm(0ₗ, ℕ)} : Ty(i),
                     p0 : Tm(i, P{0}),
                     ps {n : Tm(0ₗ, ℕ), pn : Tm(i, P{n})} : Tm(i, P{S(n)}))
                (* ------------ *)
                    : Tm(i, P{n})

equation ℕ_ind(0, i, x. P{x}, p0, n pn. ps{n, pn}) --> p0
equation ℕ_ind(S(n), i, x. P{x}, p0, n pn. ps{n, pn}) -->
    ps{n, ℕ_ind(n, i, x. P{x}, p0, n pn. ps{n, pn})}


(* top universe *)
sort Tyω ()
sort Tmω (A : Tyω)

(* Tm(l, A) is a retract of Tmω(↑ω(l, A)) *)
constructor ↑ω () (l : Lvl, A : Ty(l)) : Tyω
constructor boxω (l : Lvl, A : Ty(l)) (t : Tm(l, A)) : Tmω(↑ω(l, A))
destructor  unboxω (l : Lvl, A : Ty(l)) [t : Tmω(↑ω(l, A))] () : Tm(l, A)
equation unboxω(boxω(t)) --> t

(* universe polymorphism (quantification over levels) *)
constructor ∀ () (A {i : Lvl} : Tyω) : Tyω
constructor Λ (A {i : Lvl} : Tyω) (t{i : Lvl} : Tmω(A{i}))
        : Tmω(∀(i. A{i}))
destructor inst (A {i : Lvl} : Tyω) [t : Tmω(∀(i. A{i}))] (l : Lvl)
        : Tmω(A{l})
equation inst(Λ(i. t{i}), l) --> t{l}


(* universe polymorphic id function *)
let id_poly : Tmω(∀(i. ↑ω(Sₗ(i), Π(U, a. Π(↑(El(a)), _. ↑(El(a)))))))
    :=  Λ(i. boxω(λ(a. λ(x. x))))

(* applying it to 0 *)
let 0' : Tm(0ₗ, ℕ) := unbox(﹫(﹫(unboxω(inst(id_poly, 0ₗ)), c(ℕ)), box(0)))
assert 0' = 0
