
(*  an extension of MLTT with funext and K with canonicity for natural numbers (modulo type-in-type).
    any MLTT program of type Nat using funext and K can be computed in this theory
    (except if it explores non-termination by using the fact that we have type in type) *)

(*  following sec 3.2.11 of loic pujet's thesis we first define OTT with
    identity types. then we forget about the OTT layer. only the proofs of
    funext and K remained exposed.
    then the only ways of exposing the OTT primitives are: 1- error messages,
    2- computing terms with variables, 3- computing the value of a term of type Id *)


sort Ty ()
sort Tm (A : Ty)

(* type-in-type Coquand-style universe *)
constructor U () () : Ty
constructor c () (A : Ty) : Tm(U)
destructor El () [a : Tm(U)] () : Ty
equation El(c(A)) --> A


(* Dependent products *)
constructor Π   ()
                (A : Ty, B{x : Tm(A)} : Ty)
                : Ty

constructor λ   (A : Ty, B{x : Tm(A)} : Ty)
                (t{x : Tm(A)} : Tm(B{x}))
                : Tm(Π(A, x. B{x}))

destructor ﹫   (A : Ty, B{x : Tm(A)} : Ty)
                [t : Tm(Π(A, x. B{x}))]
                (u : Tm(A))
                : Tm(B{u})

equation ﹫(λ(x. t{x}), u) --> t{u}

(* Natural numbers *)
constructor ℕ () () : Ty
constructor 0 () () : Tm(ℕ)
constructor S () (n : Tm(ℕ)) : Tm(ℕ)

destructor ℕ_ind    ()
                    [n : Tm(ℕ)]
                    (P {x : Tm(ℕ)} : Ty,
                     p0 : Tm(P{0}),
                     ps {n : Tm(ℕ), pn : Tm(P{n})} : Tm(P{S(n)}))
                (* ------------ *)
                    : Tm(P{n})

equation ℕ_ind(0, x. P{x}, p0, n pn. ps{n, pn}) --> p0
equation ℕ_ind(S(n), x. P{x}, p0, n pn. ps{n, pn}) -->
    ps{n, ℕ_ind(n, x. P{x}, p0, n pn. ps{n, pn})}


(* empty type *)
constructor ∅ () () : Ty
(* we add ∅ind as a constructor, allowing us to omit P *)
constructor ∅ind (P : Ty) (x : Tm(∅)) : Tm(P)


(* id types (aka inductive equality) *)
constructor Id () (A : Ty, x : Tm(A), y : Tm(A)) : Ty
constructor refl (A : Ty, x : Tm(A)) () (x / y : Tm(A)) : Tm(Id(A, x, y))

(* we cannot omit any of the arguments, because they will be computationally
   relevant: later we will add another rewrite rule for J which will need
   them to compute *)
destructor  J   () [A : Ty]
                (x : Tm(A), y : Tm(A),
                 e : Tm(Id(A, x, y)),
                 P {x' : Tm(A), e : Tm(Id(A, x, x'))} : Ty,
                 p : Tm(P{x, refl}))
            : Tm(P{y, e})

(* a consequence of this is that we need to linearize the following rule,
   whose well-typedness now cannot be checked automatically by the implementation *)
equation skipcheck
    J(A, x, x', refl, x e.P{x, e}, p) --> p

let congId (A : Ty, x : Tm(A), y : Tm(A),
            e : Tm(Id(A, x, y)), P : Ty, p {x : Tm(A)} : Tm(P))
        : Tm(Id(P, p{x}, p{y}))
    := J(A, x, y, e, x' _. Id(P, p{x}, p{x'}), refl)

let transId (A : Ty, x : Tm(A), y : Tm(A),
             z : Tm(A), p : Tm(Id(A, x, y)), q : Tm(Id(A, y, z)))
        : Tm(Id(A, x, z))
    := J(A, y, z, q, x' _. Id(A, x, x'), p)

(* ===================================== *)
(* --- BEGINNING OF THE PRIVATE PART --- *)
(* ===================================== *)

sort Prop ()
sort Prf (P : Prop)

(* heterogeneous observational equality *)
constructor Eq () (A : Ty, a : Tm(A), b : Tm(A)) : Prop

constructor refleq (A : Ty, a : Tm(A)) ()
                 (a / b : Tm(A)) : Prf(Eq(A, a, b))

(* the following two symbols (mk and cast) are the only way to
   escape from Prop to Ty *)

constructor mk (A : Ty, x : Tm(A), y : Tm(A))
               (p : Prf(Eq(A, x, y)))
            : Tm(Id(A, x, y))

destructor cast () [A : Ty] (B : Ty, e : Prf(Eq(U, c(A), c(B))), t : Tm(A)) : Tm(B)

destructor subst (A : Ty, x : Tm(A), y : Tm(A))
                 [e : Prf(Eq(A, x, y))]
                 (P {x' : Tm(A), e : Prf(Eq(A, x, x'))} : Prop,
                  p : Prf(P{x, refleq}))
                : Prf(P{y, e})


(* unmk could be derived from J if we added Prop in Ty. because proving unmk
   would be the only use for this, I prefer to add it as an axiom *)
constructor unmk (A : Ty, x : Tm(A), y : Tm(A)) (p : Tm(Id(A, x, y)))
            : Prf(Eq(A, x, y))


(* sym and trans can be derived from subst, but here I add them as
   constructor to omit some of the args *)

constructor sym (A : Ty, x : Tm(A), y : Tm(A)) (p : Prf(Eq(A, y, x)))
    : Prf(Eq(A, x, y))

constructor trans (A : Ty, x : Tm(A), z : Tm(A))
                  (y : Tm(A), p : Prf(Eq(A, x, y)), p : Prf(Eq(A, y, z)))
    : Prf(Eq(A, x, z))

(* some of the axioms defining the observational equality, we will
   not need all of them *)

constructor EqΠ_i  (A : Ty,  B{x : Tm(A)} : Ty,
                    f : Tm(Π(A, x.B{x})), f' : Tm(Π(A, x.B{x})))
                   (p {x : Tm(A)} : Prf(Eq(B{x}, ﹫(f, x), ﹫(f', x))))
                   : Prf(Eq(Π(A, x.B{x}), f, f'))


constructor EqUΠΠ_i (A  : Ty, B {x  : Tm(A)} : Ty,
                     A' : Ty, B'{x' : Tm( A')} : Ty)
                    (p1 : Prf(Eq(U, c(A), c(A'))),
                     p2 {x' : Tm( A')} :
                        let x := cast(A', A, sym(p1), x') in
                        Prf(Eq(U, c(B{x}), c(B'{x'}))))
                    : Prf(Eq(U, c(Π(A, x.B{x})), c(Π(A', x'.B'{x'}))))


destructor EqUΠΠ_e1  (A  : Ty, B {x  : Tm(A)} : Ty,
                      A' : Ty, B'{x' : Tm(A')} : Ty)
                     [p : Prf(Eq(U, c(Π(A, x.B{x})), c(Π(A', x'.B'{x'}))))] ()
                    : Prf(Eq(U, c(A), c(A')))

destructor EqUΠΠ_e2  (A  : Ty, B {x  : Tm(A)} : Ty,
                      A' : Ty, B'{x' : Tm( A')} : Ty)
                     [p : Prf(Eq(U, c(Π(A, x.B{x})), c(Π(A', x'.B'{x'}))))]
                     (x' : Tm(A'))
                    : let x := cast(A', A, sym(EqUΠΠ_e1(p)), x') in
                      Prf(Eq(U, c(B{x}), c(B'{x'})))


constructor EqId_i (A : Ty, x : Tm(A), y : Tm(A),
                    e : Tm(Id(A, x, y)), e' : Tm( Id(A, x, y)))
                    () : Prf(Eq(Id(A, x, y), e, e'))

destructor EqUIdId_e1 (A : Ty, x : Tm(A), y : Tm(A),
                       A' : Ty, x' : Tm( A'), y' : Tm( A'))
                      [e : Prf(Eq(U, c(Id(A, x, y)), c(Id(A', x', y'))))]
                      () : Prf(Eq(U, c(A), c(A')))

destructor EqUIdId_e2 (A : Ty, x : Tm(A), y : Tm(A),
                       A' : Ty, x' : Tm( A'), y' : Tm( A'))
                      [e : Prf(Eq(U, c(Id(A, x, y)), c(Id(A', x', y'))))]
                      () : Prf(Eq(A', cast(A, A', EqUIdId_e1(e), x), x'))

destructor EqUIdId_e3 (A : Ty, x : Tm(A), y : Tm(A),
                       A' : Ty, x' : Tm( A'), y' : Tm( A'))
                      [e : Prf(Eq(U, c(Id(A, x, y)), c(Id(A', x', y'))))]
                      () : Prf(Eq(A', cast(A, A', EqUIdId_e1(e), y), y'))

(* computation rules for cast *)

equation   (A : Ty, B{x : Tm(A)} : Ty, A' : Ty, B'{x' : Tm( A')} : Ty,
            e : Prf(Eq(U, c(Π(A, x.B{x})), c(Π(A', x'.B'{x'})))),
            t : Tm( Π(A, x.B{x})))

    cast(Π(A, x. B{x}), Π(A', x'. B'{x'}), e, t)
    -->  λ(x'.
            let x := cast(A', A, sym(EqUΠΠ_e1(e)), x') in
            cast(B{x}, B'{x'}, EqUΠΠ_e2(e, x'), ﹫(t, x)))

equation (e : Prf(Eq(U, c(∅), c(∅))), t : Tm( ∅))
    cast(∅, ∅, e, t) --> t

equation (e : Prf(Eq(U, c(ℕ), c(ℕ))), t : Tm( ℕ))
    cast(ℕ, ℕ, e, t) --> t

let rhs' (A : Ty, x : Tm(A), y : Tm(A),
          A' : Ty, x' : Tm( A'), y' : Tm( A'),
          e : Prf(Eq(U, c(Id(A, x, y)), c(Id(A', x', y')))),
          t : Tm( Id(A, x, y)))
        : Tm( Id(A', x', y'))
    :=
    let f : Tm(Π(A, _. A')) := λ(x. cast(A, A', EqUIdId_e1(e), x)) in
    let fx≡fy := congId(A, x, y, t, A', x. ﹫(f, x)) in
    let x'≡fx : Tm(Id(A', x', ﹫(f, x))) := mk(sym(EqUIdId_e2(e))) in
    let fy≡y' : Tm(Id(A', ﹫(f, y), y')) := mk(EqUIdId_e3(e)) in
    transId(A', x', ﹫(f, x), y', x'≡fx,
        transId(A', ﹫(f, x), ﹫(f, y), y', fx≡fy, fy≡y'))

equation (A : Ty,  x  : Tm(A),  y  : Tm(A),
          A' : Ty, x' : Tm(A'), y' : Tm(A'),
          e : Prf(Eq(U, c(Id(A, x, y)), c(Id(A', x', y')))),
          t : Tm(Id(A, x, y)))

    cast(Id(A, x, y), Id(A', x', y'), e, t) -->
    rhs'(A, x, y, A', x', y', e, t)

let congEq (A : Ty, x : Tm(A), y : Tm(A),
            e : Prf(Eq(A, x, y)),
            P : Ty, p {x : Tm(A)} : Tm(P))
            : Prf(Eq(P, p{x}, p{y}))
    := subst(e, x' e. Eq(P, p{x}, p{x'}), refleq)


let eqJ (A : Ty, x : Tm(A), y : Tm(A),
         e : Prf(Eq(A, x, y)), P{z : Tm(A), p : Tm(Id(A, x, z))} : Ty)
        : Prf(Eq(U, c(P{x, refl}), c(P{y, mk(e)})))
    :=
    let q := congEq(Id(A, x, x), refl, mk(refleq), EqId_i, U, e. c(P{x, e})) in
    subst(e, z p. Eq(U, c(P{x, refl}), c(P{z, mk(p)})), q)

let rhs (A : Ty, x : Tm(A), y : Tm(A),
              e : Prf(Eq(A, x, y)),
              P {x' : Tm(A), e : Tm( Id(A, x, x'))} : Ty,
               p : Tm( P{x, refl}))
        : Tm( P{y, mk(e)})
    := cast(P{x, refl}, P{y, mk(e)}, eqJ(A, x, y, e, x p. P{x, p}), p)

(* once again, this rewrite rule cannot be checked automatically by our implementation *)
equation skipcheck
    J(A, x, y, mk(e), x e.P{x, e}, p) --> rhs(A, x, y, e, x e. P{x, e}, p)

(* =========================== *)
(* --- END OF PRIVATE PART --- *)
(* =========================== *)

let K (A : Ty, x : Tm(A), y : Tm(A),
       p : Tm(Id(A, x, y)), q : Tm(Id(A, x, y)))
    : Tm(Id(Id(A, x, y), p, q))
    := mk(EqId_i)


let funext (A : Ty, B{x : Tm(A)}: Ty,
            f : Tm(Π(A, x. B{x})), f' : Tm(Π(A, x. B{x})),
            p {x : Tm(A)} : Tm(Id(B{x}, ﹫(f, x), ﹫(f', x))))
        : Tm(Id(Π(A, x. B{x}), f, f'))
    := mk(EqΠ_i(x. unmk(p{x})))


let id  : Tm(Π(ℕ, _. ℕ)) := λ(x. x)
let id' : Tm(Π(ℕ, _. ℕ)) := λ(x. ℕ_ind(x, _. ℕ, 0, _ n. S(n)))

let id≡id' : Tm(Id(Π(ℕ, _. ℕ), id, id'))
    := funext(ℕ, _. ℕ, id, id', x.
        ℕ_ind(x, x'. Id(ℕ, x', ﹫(id', x')), refl, y e.congId(ℕ, y, ﹫(id', y), e, ℕ, n. S(n))))

(* in regular MLTT the following would get stuck *)
let 0' : Tm(ℕ)
    := J(Π(ℕ, _. ℕ) :: Ty, id, id', id≡id', _ _. ℕ, 0)

(* but here we are able to compute it *)
assert 0' = 0