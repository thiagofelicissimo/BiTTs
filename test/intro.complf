
(* INTRODUCTION TO COMPLF *)

(* In this file I will showcase how CompLF can be used through an example: we will see
   how to define a version of Martin-Lof's Type Theory. The explanations are sometimes quite
   long, so if you want something shorter read instead "quick_intro.complf".

   Before starting, let me explain a bit the raw syntax of CompLF. A term is an
   expression of the form "c(𝐭)" or "x(𝐭)" where x is a variable, c is a term-level symbol
   and "𝐭" is a spine. A spine is a list of arguments, each one of the form "x1..xk. t",
   where "x1..xk" is a list of variables and t is a term. When "x1..xk" is empty we write "t"
   instead of ". t" and when "𝐭" is empty we write "c" and "x" instead of "c()" and "x()".
   A type is an expression of the form "c(𝐭)" where c is a type-level symbol and 𝐭 is a spine.

   This explanation is actually only an approximation, because in CompLF the raw syntax
   is already subject to a form of simple typing, which allows to specify which expressions
   are syntactically well-formed. For instance, with the symbol λ that we will define
   in a moment, λ(x.t) is a valid (raw) term, but λ(t) or λ(t, u) are not.

   Remark that in CompLF a variable can appear applied to a spine, as in x(𝐭). However,
   the regular way of defining substitution would not work here: syntactically replacing
   x by "y.y" in "x(u)" would lead to "(y.y)(u)", which is not a well-formed term. Instead,
   we use hereditary substitution, a kind of substitution which integrates a form of beta-
   reduction, allowing us to have "x(u)[(y.y)/x] = y[u/y] = u". The termination of this kind
   of substitution is ensured by the fact that our raw terms are subject to a form of
   simple typing, as stated in the previous paragraph.

   Let us now start constructing our example.

   The first building block of a theory is its judgment forms. In MLTT there are two
   of such: "t : A" asserts that t is a term of type A, and "A type" asserts that A
   is a type. In CompLF we represent judgment forms by the framework's type-level
   symbols:
*)

symbol Ty : *

symbol Tm (A : Ty) : *

(*
    Before saying how this allows to represent judgment forms, let me explain the syntax.
    A type-level symbol declaration consists of a name for the symbol, along with a list
    of arguments it takes, and at the end the token * signals that this symbol is type-level.
    I will better explain the syntax of arguments later.

    From now on, wheneaver we write "A : Ty" you should read it as MLTT's judgment form
    "A type" and wheneaver we write "t : Tm A" you should read it as MLTT's "t : A".
    Note that here we are allowed to write "Tm A" instead of "Tm(A)": type-level symbols
    with only one argument have a special case in the parser in order to help make the
    notation lighter. Also note that when we write "A : Ty", even if A represents a type of
    MLTT, it is not a type of the framework, but a term of type Ty.

    Now that we have the basic building blocks of MLTT, we can start the interesting part:
    adding type formers. The first types I'll add are of course the dependent products.
    In order to do this I'll add a symbol Π, and the symbols λ and ﹫ for its constructor
    (abstraction) and its eliminator (application).
*)

symbol+ Π (A : Ty)- (B : (x : Tm A) Ty)- : Ty

symbol- λ {A : Ty} {B : (_ : Tm A) Ty} (t : (x : Tm A) Tm B(x))- : Tm Π(A, x. B(x))

symbol+ ﹫ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm Π(A, x. B(x)))+ (u : Tm A)- : Tm B(u)

(*
    There's a lot of new syntax, so let me explain it all before moving on.

    Term-level symbols are declared with a list of arguments, each one of the form
    "[x : (x1 : T1, ..., xk : Tk) T]", where T1..Tk and T are types of the framework,
    and the enclosing tokens (here represented generically by "[" and "]"), are one of
    the following:

    - Arguments between {..} are called erased arguments, and this is because when looking
    at the "arity" of a symbol (roughly, how many arguments it takes and how many variables
    it binds in each argument), these arguments are erased. This means that each time we
    write a term headed by λ, we only write λ(x. t), and therefore the arguments A and B
    are omitted from the syntax. This can be compared to the implicit arguments of Coq
    and Agda, but a major difference is that these arguments are never reconstructed in the
    internal syntax. Therefore, unlike with implicit arguments, the syntax that the user
    sees is the real syntax that we have internally.

    - Arguments between (..)+ are arguments that are typed in infer mode when typing the
    symbol. This means that when a term is given at this argument, it should be able to
    synthesize a type (as we will discuss later, the terms that can synthesize a type are
    variables and terms headed by symbols defined with symbol+). If we have (x : T)+, then
    the free variables x1 .. xk that appear in T should be exactly the erased arguments
    that were declared just before x, in the same order as they appear in T. For instance,
    in the case of ﹫ the free variables of the t are A and B, and correspond exactly to
    the erased arguments declared just before t.

    - Arguments between (..)- are arguments that are typed in check mode when typing the
    symbol. This means that they do not need to be able to synthesize a type, as they are
    given a type to check against.

    Moreover, term-level symbols are accompanied by a mode annotation. For instance, Π
    is declared with symbol+, which means that Π can synthesize its type and hence can
    be typed in both infer or check mode. In order for a symbol to be declared with symbol+,
    all of its erased arguments must be recoverable from (..)+ arguments. On the other hand,
    we also have symbols declared with symbol-, which can only be typed in check mode. Because
    of this, they can use the type they check against to recover some of its erased arguments.
    This is the case of λ, which recovers A and B from the given type.

    What does it mean for an argument to be recoverable from a type T? We will not say all
    the details, but roughly:
    1) T should be a pattern
    2) each free variable appears fully applied to the bound variables in scope
    3) if a constant c occurs in T, then its entry in the signature has no erased arguments,
       and moreover c is not the head of any rewrite rule

    Finally, note that when writing terms, symbols have to be fully applied to their arguments,
    which are enclosed by (..), and each argument should bind the correct number of variables.
    For instance, "Π(A, x.B)" is a valid term, but "Π(A)", "Π(A, B)", "Π A (x. B)" or "Π A B"
    are not syntactically well-formed

    Now let us get back to the example. In order to finish the definition of dependent products
    we still need to add its associated computation rule. This is done in the following
    declaration, where the free variables of the rewrite rule are prefixed with "$".
*)

rew ﹫(λ(x. $t(x)), $u) --> $t($u)

(*  The commands symbol and rew are used to define the theory we work in, and therefore
    they do not do any form of checking. It is the responsibility of the user to make
    sure that the symbols that they define make sense, and that the rewrite rules are
    confluent and preserve typing, as these properties are in general undecidable.
    Instead, it is the terms written inside of the theory that can be typed by
    CompLF's bidirectional typing algorithm. Let us look at some examples.

    We first pose an auxiliary unspecified type.
*)

symbol T : Ty

(* We can make definitions by using the following syntax. The following is the definition
   of the church numeral 1.
*)
let church1 : Tm Π(Π(T, _. T), _. Π(T, _. T)) := λ(f. λ(x. ﹫(f, x)))

(* This is typed in the following way. First, we verify that the given type is well-typed,
   and then check the term given after the ":=" against the given type. If this succeeds, then
   internally we add the name church1 to the signature as a positive symbol, along with an
   rewrite rule allowing to unfold church1 into its definition.

   When a term is inferable, we can omit the type annotation.
*)
let church1_id := ﹫(church1, λ(x.x))

(* We can also query the type using the command "type" *)
type ﹫(church1, λ(x.x))

(* And we can reduce a term using "eval" *)
eval ﹫(church1, λ(x.x))

(* Note that "eval" does not try to type the term before evaluating it, so it is possible
   to make the evaluator loop by giving it an untyped term, such as Ω *)
(* eval ﹫(λ(x. ﹫(x, x)), λ(x. ﹫(x, x))) (* Ω *) *)

(* The following declaration would raise the error "Typing error: A part of the term that
   should be inferable cannot synthesize a type". Indeed, because we are omitting the
   type annotation, the term should be inferable, however λ is a negative symbol,
   and thus can only be typed in check mode.
*)
(* let infer_lam := λ(f. λ(x. ﹫(f, x))) *)

(* The following would also raise the same error. Indeed, the first non-erased argument
   of ﹫ is positive, and thus needs to be able to synthesize its type, but λ is a negative
   symbol.
*)
(* let redex : Tm Π(T, _. T) := λ(x. ﹫(λ(y.y), x)) *)

(* However, as designers of the theory we are defining, we can instead chose a different
   definition of dependent product types, in which the symbol λ has enough information to
   synthesize its type. This the allow us to declare it as a positive symbol.
*)

symbol Π₂ (A : Ty) (B : (x : Tm A) Ty) : Ty

symbol ﹫₂ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm Π₂(A, x. B(x)))+ (u : Tm A) : Tm B(u)

symbol λ₂ (A : Ty) {B : (_ : Tm A) Ty} (t : (x : Tm A) Tm B(x))+ : Tm Π₂(A, x. B(x))

rew ﹫₂(λ₂($T, x. $t(x)), $u) --> $t($u)

(* Note that there are some mode annotations missing. By default, a non-annotated
   symbol has mode +, and a non-annotated argument has mode -, so we don't need to
   write them every time. This choice is justified by the following reasoning: a
   symbol declaration in a logical framework with no support for such mode annotations,
   such as Dedukti, can be understood in CompLF as a declaration of a positive symbol
   in which every argument is negative.

   Now that λ₂ is a positive symbol, in can be inferred, and hence we can define
   the terms infer_lam and redex that would have been rejected.
*)

let infer_lam := λ₂(Π₂(T, _. T), f. λ₂(T, x. ﹫₂(f, x)))
type infer_lam

let redex := λ₂(T, x. ﹫₂(λ₂(T, y.y), x))
type redex


(* Let us now continue with our definition of MLTT and add two other type formers:
   dependent sums and a universe.
*)

symbol Σ (A : Ty) (B : (x : Tm A) Ty) : Ty

symbol- mkΣ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm A) (u : Tm B(t)) : Tm Σ(A, x. B(x))

symbol π₁ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm Σ(A, x. B(x)))+ : Tm A

symbol π₂ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm Σ(A, x. B(x)))+ : Tm B(π₁(t))

rew π₁(mkΣ($t, $u)) --> $t

rew π₂(mkΣ($t, $u)) --> $u

(* Recall from MLTT that a Tarski-style universe is a type U containing codes for other types,
   along with a decoding function El mapping such codes to the types that they correspond to *)

symbol U : Ty

symbol El (A : Tm U) : Ty

(* For instance, we can add a code for dependent products in U *)

symbol π (a : Tm U) (b : (_ : Tm El(a)) Tm U) : Tm U

(* And a rule saying that El decodes it to the dependent product type, as expected *)

rew El(π($a, x.$b(x))) --> Π(El($a), x. El($b(x)))

(* And we can do the same for dependent sums *)

symbol σ (a : Tm U) (b : (_ : Tm El(a)) Tm U) : Tm U
rew El(σ($a, x.$b(x))) --> Σ(El($a), x. El($b(x)))

(* As an example, we can write the "axiom of choice". Note that thanks to the erased arguments,
   the term itself has absolutely no type annotations.
*)
let ac : Tm Π(U, a. Π(U, b. Π(Π(El(b), _. U), c.
            Π(Π(El(a), _. Σ(El(b), x. El(﹫(c, x)))), _.
            Σ(Π(El(a), _. El(b)), f. Π(El(a), x. El(﹫(c, ﹫(f, x)))))))))
    := λ(a. λ(b. λ(c. λ(ϕ. mkΣ(λ(x. π₁(﹫(ϕ, x))), λ(x. π₂(﹫(ϕ, x))))))))

(* Let us now add the equality type, along with a code for it in U *)

symbol Eq (A : Ty) (t : Tm A) (u : Tm A) : Ty

symbol- refl {A : Ty} {t : Tm A} : Tm Eq(A, t, t)

symbol J {A : Ty} {a : Tm A} {b : Tm A} (t : Tm Eq(A, a, b))+
       (P : (x : Tm A, y : Tm Eq(A, a, x)) Ty) (prefl : Tm P(a, refl)) : Tm P(b, t)

rew J(refl, x y. $P(x, y), $prefl) --> $prefl

symbol eq (a : Tm U) (x : Tm El(a)) (y : Tm El(a)) : Tm U
rew El(eq($a, $x, $y)) --> Eq(El($a), $x, $y)

(* As an example, we can write proofs of symmetry, transitivity and transport. *)

let sym : Tm Π(U, a. Π(El(a), x. Π(El(a), y. Π(Eq(El(a), x, y), _. Eq(El(a), y, x)))))
    :=  λ(a. λ(x. λ(y. λ(p. J(p, z q. Eq(El(a), z, x), refl)))))

let trans : Tm Π(U, a. Π(El(a), x. Π(El(a), y. Π(El(a), z.
               Π(Eq(El(a), x, y), _. Π(Eq(El(a), y, z), _. Eq(El(a), x, z)))))))
    := λ(a. λ(x. λ(y. λ(z. λ(p. λ(q. J(q, k r. Eq(El(a), x, k), p)))))))

let transp : Tm Π(U, a. Π(U, b. Π(Eq(U, a, b), _. Π(El(a), _. El(b)))))
    := λ(a. λ(b. λ(p. λ(x. J(p, z q. El(z), x)))))
type transp


(* We can then add natural numbers, along with a code for it in U *)

symbol ℕ : Ty
symbol 0 : Tm ℕ
symbol S (_ : Tm ℕ) : Tm ℕ

symbol+ ℕ_ind (P : (_ : Tm ℕ) Ty)
              (p0 : Tm P(0))
              (ps : (n : Tm ℕ, pn : Tm P(n)) Tm P(S(n)))
              (n : Tm ℕ)
              (* ------------ *)
              : Tm P(n)

rew ℕ_ind(x. $P(x), $p0, n pn. $ps(n, pn), 0) --> $p0
rew ℕ_ind(x. $P(x), $p0, n pn. $ps(n, pn), S($n)) -->
    $ps($n, ℕ_ind(x. $P(x), $p0, n pn. $ps(n, pn), $n))

symbol nat : Tm U
rew El(nat) --> ℕ

(* And we can write some functions using ℕ_ind, such as ＋, × and fact *)

let ＋ : Tm Π(ℕ, _. Π(ℕ, _. ℕ)) := λ(x. λ(y. ℕ_ind(_. ℕ, x, _ n. S(n), y)))

let 1 := S(0)
let 2 := S(1)
let 3 := S(2)
let 4 := S(3)

(* 3 + 3 *)
eval ﹫(﹫(＋, 3), 3)
let 6 := ﹫(﹫(＋, 3), 3)

let × : Tm Π(ℕ, _. Π(ℕ, _. ℕ)) :=
    λ(x. λ(y. ℕ_ind(_. ℕ, 0, _ n. ﹫(﹫(＋, n), x), y)))

(* 3 * 3 *)
eval ﹫(﹫(×, 3), 3)
let 9 := ﹫(﹫(×, 3), 3)

let fact : Tm Π(ℕ, _. ℕ) := λ(x. ℕ_ind(_. ℕ, S(0), n m. ﹫(﹫(×, S(n)), m), x))
eval ﹫(fact, 4)

let 8 := S(S(S(S(4))))
(* In my machine, this takes less then 1s *)
(* eval ﹫(fact, 8) *)


(* One interesting remark is that because of erased arguments, uniqueness of types
   might not hold. For instance, the term "mkΣ(6, refl)" can be checked as having two
   different and not equivalent types. This also shows that there is no hope for
   mkΣ to be able to synthesize its type in the absence of further type annotations
*)
let pair : Tm Σ(ℕ, x. Eq(ℕ, x, x)) := mkΣ(6, refl)
let pair2 : Tm Σ(ℕ, x. Eq(ℕ, 6, x)) := mkΣ(6, refl)

(* Let us now define lists, along with a code in U for them *)

symbol List (A : Ty) : Ty
symbol- nil {A : Ty} : Tm List(A)
symbol- cons {A : Ty} (a : Tm A) (l : Tm List(A)) : Tm List(A)

symbol ind_List {A : Ty}
              (l : Tm List(A))+
              (P : (_ : Tm List(A)) Ty)
              (l_nil : Tm P(nil))
              (l_cons : (a : Tm A, l : Tm List(A), pl : Tm P(l)) Tm P(cons(a, l)))
              (* -------------- *)
              : Tm P(l)

rew ind_List(nil, l. $P(l), $p_nil, a l pl. $p_cons(a, l, pl)) --> $p_nil
rew ind_List(cons($a, $l), l. $P(l), $p_nil, a l pl. $p_cons(a, l, pl)) -->
    $p_cons($a, $l, ind_List($l, l. $P(l), $p_nil, a l pl. $p_cons(a, l, pl)))

symbol list (a : Tm U) : Tm U
rew El(list($a)) --> List(El($a))

(* Some examples of functions defined with ind_List *)

let hdℕ : Tm Π(List(ℕ), _. ℕ) (* returns 0 if l = nil *)
    := λ(l. ind_List(l, _. ℕ, 0, x l2 pl. x))

let tlℕ : Tm Π(List(ℕ), _. List(ℕ)) (* returns nil if l = nil *)
    := λ(l. ind_List(l, _. List(ℕ), nil, x l2 pl. l2))

let 3∶2∶1 : Tm List(ℕ) := cons(3, cons(2, cons(1, nil)))
eval 3∶2∶1
eval ﹫(hdℕ, 3∶2∶1)
eval ﹫(hdℕ, 3∶2∶1)
eval ﹫(tlℕ, 3∶2∶1)
