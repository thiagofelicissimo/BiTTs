
(* MLTT with Tarski-style universes and universe polymorphism *)

symbol Ty : *
symbol Tm (A : Ty) : *

(* Meta-type of levels representing natural numbers *)

symbol Lvl : *
symbol lzero : Lvl
symbol lsucc (_ : Lvl) : Lvl
symbol lmax (_ : Lvl) (_ : Lvl) : Lvl

rew lmax(lzero, $x) --> $x
rew lmax($x, lzero) --> $x
rew lmax(lsucc($x), lsucc($y)) --> lsucc(lmax($x, $y))

symbol U (_ : Lvl) : Ty
symbol El {i : Lvl} (A : Tm U(i))+ : Ty

symbol u (i : Lvl) : Tm U(lsucc(i))
rew El(u($i)) --> U($i)

(* Dependent products along with codes for U *)

symbol Π (A : Ty) (B : (x : Tm A) Ty) : Ty
symbol- λ {A : Ty} {B : (_ : Tm A) Ty} (t : (x : Tm A) Tm B(x)) : Tm Π(A, x. B(x))
symbol ﹫ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm Π(A, x. B(x)))+ (u : Tm A) : Tm B(u)
rew ﹫(λ(x. $t(x)), $u) --> $t($u)

(* we would like to omit the annotations i and j. we could recover the i from the type of a,
   however the argument j cannot be recovered from the type of b. indeed, we require our patterns
   to be fully applied, however Tm(U(j)) is not a fully applied pattern, because j is not applied to
   the local variable x. the requirement for patterns to be fully applied allows us to avoid in the
   proof of soundness of the algorithm the use of straightening, a principle that is not
   always satisfied by CompLF theories.  *)
symbol π (i : Lvl) (j : Lvl) (A : Tm U(i)) (B : (x : Tm El(A)) Tm U(j)) : Tm U(lmax(i, j))
rew El(π($i, $j, $A, x. $B(x))) --> Π(El($A), x. El($B(x)))

(* Level quantification *)

symbol ∀ (_ : (i : Lvl) Ty) : Ty
symbol- Λ {A : (i : Lvl) Ty} (t : (i : Lvl) Tm A(i)) : Tm ∀(i. A(i))
symbol inst {A : (i : Lvl) Ty} (t : Tm ∀(i. A(i)))+ (n : Lvl) : Tm A(n)
rew inst(Λ(i. $t(i)), $n) --> $t($n)

(* polymorphic id funciton *)

let id_poly : Tm ∀(i. El(π(lsucc(i), lmax(i,i), u(i), a. π(i, i, a, _. a))))
    := Λ(i. λ(a. λ(x. x)))

type inst(id_poly, lzero)
eval inst(id_poly, lzero)
