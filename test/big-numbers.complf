symbol Ty : *

symbol Tm (A : Ty) : *


symbol+ Π (A : Ty)- (B : (x : Tm A) Ty)- : Ty
symbol- λ {A : Ty} {B : (_ : Tm A) Ty} (t : (x : Tm A) Tm B(x))- : Tm Π(A, x. B(x))
symbol ﹫ {A : Ty} {B : (_ : Tm A) Ty} (t : Tm Π(A, x. B(x)))+ (u : Tm A) : Tm B(u)
rew ﹫(λ(x. $t(x)), $u) --> $t($u)

symbol ℕ : Ty
symbol 0 : Tm ℕ
symbol S (_ : Tm ℕ) : Tm ℕ

symbol+ ℕ_ind (P : (_ : Tm ℕ) Ty)-
              (p0 : Tm P(0))-
              (ps : (n : Tm ℕ, pn : Tm P(n)) Tm P(S(n)))-
              (n : Tm ℕ)-
              (* ------------ *)
              : Tm P(n)
rew ℕ_ind(x. $P(x), $p0, n pn. $ps(n, pn), 0) --> $p0
rew ℕ_ind(x. $P(x), $p0, n pn. $ps(n, pn), S($n)) -->
    $ps($n, ℕ_ind(x. $P(x), $p0, n pn. $ps(n, pn), $n))


let ＋ : Tm Π(ℕ, _. Π(ℕ, _. ℕ)) := λ(x. λ(y. ℕ_ind(_. ℕ, x, _ n. S(n), y)))
let × : Tm Π(ℕ, _. Π(ℕ, _. ℕ)) := λ(x. λ(y. ℕ_ind(_. ℕ, 0, _ n. ﹫(﹫(＋, n), x), y)))
let fact : Tm Π(ℕ, _. ℕ) := λ(x. ℕ_ind(_. ℕ, S(0), n m. ﹫(﹫(×, S(n)), m), x))

let 1 := S(0)
let 2 := S(S(0))
let 3 := S(S(S(0)))
let 6 := ﹫(﹫(＋, 3), 3)
let 8 := S(S(S(S(S(S(S(S(0))))))))

(* fact 8 = 40320 *)
eval ﹫(fact, 8) (* in my machine, takes around 1.5s *)



let 10 := S(S(S(S(S(S(S(S(S(S(0))))))))))

eval ﹫(﹫(×, 10), 10) (* very fast *)


let 30 := ﹫(﹫(×, 3), 10)

let 900 := ﹫(﹫(×, 30), 30)

(* eval 900 *)

eval ﹫(﹫(×, 30), 900)

let 9000 := ﹫(﹫(×, 10), 900)

eval 9000
